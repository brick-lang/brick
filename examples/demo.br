# This is a comment

#=
#  This is a block comment
#    Block comments can be indented and not lose formatting
#=

# The trait keyword is used to declare a new trait.
# Since traits are only used for method declarations,
# all trait methods have a type signature of
# `TraitName -> ...`
# (The implicit first parameter is always the type of the trait)
trait Greeter : Trait
  greet(name:String) -> Bool
end


# Object is implied inheritance, but is explicit here for
# demonstration of the inheritance syntax
#
# Classes have a default constructor, which is also used
# for object deconstruction (pattern matching).
class HelloClass(our_name : String) : Object impl ToString
  # This is the members block
  # It declares the structure of the object
  # Members are private by default. This can be modified
  # by prefixing the accessibilty before the `members` keyword:
  # (`public members`, `protected members`)
  members
    public # means that getters and setters are created
    alias : String

    protected # means that only getters are created
    name : String = our_name

    private # means that neither getters nor setters are created
    private_var : Int

    # access keywords can be restricted to a single variable
    public hello : Int
  end

  # Do note, that you can create your own getters and setters and
  # not use the access keywords in members


  # This is a class variable.
  # It is a property of the _class_, not the instances.
  # By default, they are protected. This can be changed by prefix with
  # an access keyword
  last_name = "Johnson"

  # This is a method declaration
  # Both the argument types and return types
  # are optional
  # The last line of a method is used as the return value
  # If the stated type and the return type are different,
  # we attempt to automatically coerce the return value to
  # the stated type
  method hello(name:String) -> None
    # This is one way of doing string interpolation
    puts("Hello %s" % name)
  end

  # By redefining a method with different
  # argument types, we can change the functionality
  # depending on the arguments passed (like Java)
  method hello(num:Int) -> Unit
    num.times ->
      puts("Hello")
    end
  end

  # By not constraining the types, they are inferred.
  method hello(name)
    puts("Hello %s" % name.to_s)
  end



  # This is a multi-method
  # All the code in the block gets executed __before__
  # the corresponding method
  # Note that the parens following a method definition
  # are optional if there are no args.
  @before(hello)
  method before_hello
    puts("Saying hello")
  end

  # This is also a multi-method
  # All the code in this block get executed __after__
  # the corresponding method
  @after(hello)
  method after_hello
    puts("Done saying hello")
  end

  # The `private` and `public` keywords are used to show
  # methods to other objects:
  private
  method private_demo
    puts("This is a private method")
  end

  method other_demo
    puts("This is another private method")
  end

  public
  method public_demo
    puts("This method is public")
  end

  # Traits are implemented using either blocks inside the class
  # definition
  impl Greeter
    method greet(name:String)
      # This is another way of doing string interpolation
      puts("Hello, {:s}", name)
    end
  end
end

# OR by fully specifiying the scope of the trait:
impl HelloClass.Greeter
  method greet(name:String)
    # This is another way of doing string interpolation
    puts("Hello, {:s}", name)
  end
end

fn lambda_demo
  ["Hello"].collect ->
    # This is a lambda declaration
    # The argument and return types are optional
    fn(word:String) -> String
      word += " World."
    end

  # This is shorthand for the same:
  ["Hello"].collect -> \word:String\
    word += " World."
  end

fn concurrent_operation
  # When operating on data structures that
  # are able to be spliced, we can do operations
  # concurrently using the '=>' instead '->'
  ['Sam', 'Dave', 'John'].each => \name\
    put name
  end

  # The output order is no longer deterministic,
  # and might be Dave, Sam, John, or any combination
  # possible.
end


# Similar to Erlang, match cases can be declared in the function header
# Matches are done in order of definition, in decreasing order of
# generality.
# In the case of constant returns, the return type can be replaced with
# the value.
fn fib(0:Int) -> 0
fn fib(1:Int) -> 1
fn fib(num:Int) -> fib(num-1) + fib(num-2)

# This is simply syntax sugar for match patterns:
fn fib(num:Int) -> Int
  match num
    | 0 -> 0
    | 1 -> 0
    | _ -> fib(num-1) + fib(num-2)
  end
end

fn more_pattern_matching(n:String) -> String
  match n
    | '0'     -> puts("Zero")
    | /[1-9]/ -> puts("One through Nine")
    | _       -> puts("Something else")
  end
end

# This is an example of the 'cond' keyword.
# You may notice it looks very similar to how the 'match' keyword works.
# This is intentional. Conditional matching is very powerful feature from LISP.
# At a basic level, match is a cond statement, with lexical bindings that allow one variable
# on the LHS. Cond, therefore, is much more flexible, and can do anything that match can, with
# a bit more code.
fn gcd(a:Int, b:Int) -> Int
  cond
    | a == b -> a
    | a > b  -> gcd(a - b, b)
    | true   -> gcd(b - a, a)
  end
end

#macro our_when(condition, *body)
#    `if ,condition
#        ,body
#
#
#let | h = 3
#    do | g = 0 -> g + 1
#       puts 5
#    until | g >= h
#
#
#macro ntimes(n, *body)
#    let | g = gensym()
#        | h = gensym()
#        `let | ,h = n
#             do | ,g = 0 -> ,g + 1
#                ,body
#             until | ,g >= ,h*/


#=
@return [Int] returns a local variable by value.
#=
fn let_demo -> Int
  let x = 1 -> x +! 1
      y = x
  in
    return y  # This would return 1
  end
end
